/*********************LOGIN ADMINISTRATIVO*********************/
CREATE OR REPLACE FUNCTION USER_LOGIN(USUARIO varchar(20), CLAVE varchar(30)) RETURNS integer AS $$
DECLARE
 RESULT integer;

BEGIN
	IF ((SELECT COUNT(*) FROM ADMINISTRATOR WHERE USER = USUARIO AND PASSWORD = CLAVE) = 0) THEN

		RESULT := 500;
  	
  	ELSE
	
		RESULT := 200;
	
	END IF;
 	RETURN RESULT;
END;
$$ LANGUAGE plpgsql;

/**********************INICIO CRUD DE DOCENTES*********************/
/***************************AGREGAR DOCENTE************************/
CREATE OR REPLACE FUNCTION CREATE_TEACHER(MAIL varchar(100), CLAVE varchar(30), NOMBRE varchar(30), APELLIDO varchar(40), FEC date, TELF varchar(20), PAIS varchar(30)) RETURNS integer AS $$
DECLARE
 RESULT integer;

BEGIN
	IF ((SELECT COUNT(*) FROM TEACHER WHERE EMAIL = MAIL) = 1) THEN

		RESULT := 500;

	ELSE

		INSERT INTO TEACHER(EMAIL, PASSWORD, NAME, LASTNAME, BIRTHDATE, PHONE, COUNTRY) VALUES (MAIL, CLAVE, NOMBRE, APELLIDO, FEC, TELF, PAIS);
		RESULT := 200;

	END IF;
 	RETURN RESULT;
END;
$$ LANGUAGE plpgsql;

/*********************LEER TODOS DOCENTES*************************/
CREATE OR REPLACE FUNCTION READ_ALL_TEACHER() RETURNS TABLE(EMAIL varchar(100), PASSWORD varchar(30), NAME varchar(30), LASTNAME varchar(40), BIRTHDATE date, PHONE varchar(20), COUNTRY varchar(30)) AS $$
DECLARE

BEGIN
	RETURN QUERY
	SELECT TEA.EMAIL, TEA.PASSWORD, TEA.NAME, TEA.LASTNAME, TEA.BIRTHDATE, TEA.PHONE, TEA.COUNTRY
	FROM TEACHER TEA;
END;
$$ LANGUAGE plpgsql;

/********************LEER DOCENTES POR EMAIL*********************/
CREATE OR REPLACE FUNCTION READ_TEACHER(MAIL varchar(100)) RETURNS TABLE(EMAIL varchar(100), PASSWORD varchar(30), NAME varchar(30), LASTNAME varchar(40), BIRTHDATE date, PHONE varchar(20), COUNTRY varchar(30)) AS $$
DECLARE

BEGIN
	RETURN QUERY
	SELECT TEA.EMAIL, TEA.PASSWORD, TEA.NAME, TEA.LASTNAME, TEA.BIRTHDATE, TEA.PHONE, TEA.COUNTRY
	FROM TEACHER TEA
	WHERE TEA.EMAIL = MAIL;
END;
$$ LANGUAGE plpgsql;

/**********************MODIFICAR DOCENTES************************/
CREATE OR REPLACE FUNCTION UPDATE_TEACHER(MAIL varchar(30), CLAVE varchar(30), NOMBRE varchar(30), APELLIDO varchar(40), FEC date, TELF varchar(20), PAIS varchar(30)) RETURNS integer AS $$
DECLARE
 RESULT integer;

BEGIN
	IF ((SELECT COUNT(*) FROM TEACHER WHERE EMAIL = MAIL) = 1) THEN

		UPDATE TEACHER SET PASSWORD = CLAVE, NAME = NOMBRE, LASTNAME = APELLIDO, BIRTHDATE = FEC, PHONE = TELF, COUNTRY = PAIS WHERE EMAIL = MAIL;
		
		RESULT := 201;
  	
  	ELSE
	
		RESULT := 204;
	
	END IF;
 	RETURN RESULT;
END;
$$ LANGUAGE plpgsql;

/**********************ELIMINAR DOCENTES***********************/
CREATE OR REPLACE FUNCTION DELETE_TEACHER(MAIL varchar(30)) RETURNS integer AS $$
DECLARE
 RESULT integer;

BEGIN
	IF ((SELECT COUNT(*) FROM TEACHER WHERE EMAIL = MAIL) = 1) THEN 

		DELETE FROM TEACHER WHERE EMAIL = MAIL;
		
		RESULT := 200;

	ELSE

		RESULT := 204;

	END IF;
	RETURN RESULT;
END;
$$ LANGUAGE plpgsql;
/************************FIN CRUD DE DOCENTES*********************/

/********************INICIO CRUD DE ESTUDIANTES*******************/
/************************AGREGAR ESTUDIANTES**********************/
CREATE OR REPLACE FUNCTION CREATE_STUDENT(MAIL varchar(100), CLAVE varchar(30), NOMBRE varchar(30), APELLIDO varchar(40), FEC date, TELF varchar(20), PAIS varchar(30), FK_GRADO integer) RETURNS integer AS $$
DECLARE
 RESULT integer;

BEGIN
	IF ((SELECT COUNT(*) FROM STUDENT WHERE EMAIL = MAIL) = 1) THEN

		RESULT := 500;

	ELSE

		INSERT INTO STUDENT(EMAIL, PASSWORD, NAME, LASTNAME, BIRTHDATE, PHONE, COUNTRY, FK_GRADE) VALUES (MAIL, CLAVE, NOMBRE, APELLIDO, FEC, TELF, PAIS, FK_GRADO);
		RESULT := 200;

	END IF;
 	RETURN RESULT;
END;
$$ LANGUAGE plpgsql;

/**********************LEER TODOS ESTUDIANTES*********************/
CREATE OR REPLACE FUNCTION READ_ALL_STUDENT() RETURNS TABLE(EMAIL varchar(100), PASSWORD varchar(30), NAME varchar(30), LASTNAME varchar(40), BIRTHDATE date, PHONE varchar(20), COUNTRY varchar(30), FK_GRADE integer) AS $$
DECLARE

BEGIN
	RETURN QUERY
	SELECT STU.EMAIL, STU.PASSWORD, STU.NAME, STU.LASTNAME, STU.BIRTHDATE, STU.PHONE, STU.COUNTRY, GRA.ID, GRA.NAME
	FROM STUDENT STU, GRADE GRA
	WHERE STU.FK_GRADE = GRA.ID;
END;
$$ LANGUAGE plpgsql;

/*******************LEER ESTUDIANTES POR EMAIL*******************/
CREATE OR REPLACE FUNCTION READ_STUDENT(MAIL varchar(100)) RETURNS TABLE(EMAIL varchar(100), PASSWORD varchar(30), NAME varchar(30), LASTNAME varchar(40), BIRTHDATE date, PHONE varchar(20), COUNTRY varchar(30)) AS $$
DECLARE

BEGIN
	RETURN QUERY
	SELECT STU.EMAIL, STU.PASSWORD, STU.NAME, STU.LASTNAME, STU.BIRTHDATE, STU.PHONE, STU.COUNTRY, GRA.ID, GRA.NAME
	FROM STUDENT STU, GRADE GRA
	WHERE STU.EMAIL = MAIL AND STU.FK_GRADE = GRA.ID;
END;
$$ LANGUAGE plpgsql;

/*********************MODIFICAR ESTUDIENTES**********************/
CREATE OR REPLACE FUNCTION UPDATE_STUDENT(MAIL varchar(30), CLAVE varchar(30), NOMBRE varchar(30), APELLIDO varchar(40), FEC date, TELF varchar(20), PAIS varchar(30), FK_GRADO integer) RETURNS integer AS $$
DECLARE
 RESULT integer;

BEGIN
	IF ((SELECT COUNT(*) FROM STUDENT WHERE EMAIL = MAIL) = 1) THEN

		UPDATE STUDENT SET PASSWORD = CLAVE, NAME = NOMBRE, LASTNAME = APELLIDO, BIRTHDATE = FEC, PHONE = TELF, COUNTRY = PAIS, FK_GRADE = FK_GRADO WHERE EMAIL = MAIL;
		
		RESULT := 201;
  	
  	ELSE
	
		RESULT := 204;
	
	END IF;
 	RETURN RESULT;
END;
$$ LANGUAGE plpgsql;

/*********************ELIMINAR ESTUDIANTES**********************/
CREATE OR REPLACE FUNCTION DELETE_STUDENT(MAIL varchar(30)) RETURNS integer AS $$
DECLARE
 RESULT integer;

BEGIN
	IF ((SELECT COUNT(*) FROM STUDENT WHERE EMAIL = MAIL) = 1) THEN 

		DELETE FROM STUDENT WHERE EMAIL = MAIL;
		
		RESULT := 200;

	ELSE

		RESULT := 204;

	END IF;
	RETURN RESULT;
END;
$$ LANGUAGE plpgsql;
/********************FIN CRUD DE ESTUDIANTES******************/